//-----------------------------------------------------------------------------
// <copyright file="VLog.GetDefaultErrorCodes.cs" company="genuine">
//     Copyright (c) J.Baltikauskas. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------------
//  Author:     J.Baltikauskas
//  Date:       03/26/2012
//-----------------------------------------------------------------------------
namespace Vodca
{
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using Vodca.Logging;

    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1601:PartialElementsMustBeDocumented", Justification = "Reviewed. Suppression is OK here.")]
    public sealed partial class VLog
    {
        /// <summary>
        /// Gets the default VLog error codes.
        /// </summary>
        /// <returns>The default error codes</returns>
        public static IEnumerable<VLogErrorCode> GetVLogErrorCodes()
        {
            var collection = new List<VLogErrorCode>
                {
                      new VLogErrorCode(400, "Bad Request") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(401, "Unauthorized") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(402, "Payment Required") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(403, "Forbidden") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(404, "Not Found") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(405, "Method Not Allowed") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(406, "Not Acceptable") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(407, "Proxy Authentication Required") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(408, "Request Timeout") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(409, "Conflict") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(410, "Gone") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(411, "Length Required") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(412, "Precondition Failed") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(413, "Request Entity Too Large") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(414, "Request-URI Too Long") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(415, "Unsupported Media Type") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(416, "Requested Range Not Satisfiable") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(417, "Expectation Failed") { Priority = VLogErrorTypePriority.Low, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(500, "Internal Server Error") { Priority = VLogErrorTypePriority.High, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(501, "Not Implemented") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(502, "Bad Gateway") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(503, "Service Unavailable") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(504, "Gateway Timeout") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(505, "HTTP Version Not Supported") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },

                      new VLogErrorCode(1000, "JavaScript Error") { Priority = VLogErrorTypePriority.Normal, ExcludeBrowserCapabilities = true },
                      new VLogErrorCode(1002, "Syntax error") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1003, "Expected ':'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1004, "Expected ';'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1005, "Expected '('") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1006, "Expected ')'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1007, "Expected ']'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1008, "Expected '{'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1009, "Expected '}'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1010, "Expected identifier") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1011, "Expected '='") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1012, "Expected '/'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1014, "Invalid character") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1015, "Unterminated string constant") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1016, "Unterminated comment") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1018, "'return' statement outside of function") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1019, "Can't have 'break' outside of loop") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1020, "Can't have 'continue' outside of loop") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1023, "Expected hexadecimal digit") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1024, "Expected 'while'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1025, "Label redefined") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1026, "Label not found") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1027, "'default' can only appear once in a 'switch' statement") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1028, "Expected identifier, string or number") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1029, "Expected '@end'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1030, "Conditional compilation is turned off") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1031, "Expected constant") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1032, "Expected '@'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1033, "Expected 'catch'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(1035, "Throw must be followed by an expression on the same source line") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5000, "Cannot assign to 'this'") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5001, "Number expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5002, "Function expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5003, "Cannot assign to a function result") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5005, "String expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5006, "Date object expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5007, "Object expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5008, "Illegal assignment") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5009, "Undefined identifier") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5010, "Boolean expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5012, "Object member expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5013, "VBArray expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5014, "JScript object expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5015, "Enumerator object expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5016, "Regular Expression object expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5017, "Syntax error in regular expression") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5018, "Unexpected quantifier") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5019, "Expected ']' in regular expression") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5020, "Expected ')' in regular expression") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5021, "Invalid range in character set") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5022, "Exception thrown and not caught") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5023, "Function does not have a valid prototype object") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5024, "The URI to be encoded contains an invalid character") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5025, "The URI to be decoded is not a valid encoding") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5026, "The number of fractional digits is out of range") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5027, "The precision is out of range") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5028, "Array or arguments object expected") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5029, "Array length must be a finite positive integer") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true },
                      new VLogErrorCode(5030, "Array length must be assigned a finite positive number") { Priority = VLogErrorTypePriority.Normal, ExcludeServerVariables = true, ExcludeQueryStringVariables = true, ExcludeFormVariables = true, ExcludeApplicationStateVariables = true, ExcludeCookies = true, ExcludeSessionStateVariables = true }
                };

            return collection.ToArray();
        }
    }
}